une page toujours blanche

Une Interface Utilisateur(A User Interface)

Utiliser un canevas infini donne, à mesure que l'on se l'approprie,
des idées de création qui demandent une interface utilisateur adaptée.
L'interface présentée ici découle des principes suivants:
    - pas de menus: à l'écran, il y a le contenu et le curseur, et c'est tout
    - le clavier et la souris sont des instruments très satisfaisants pour les mains humaines, car ils sont de bons conducteurs de subtilité
    - l'interface est une collection imbriquée et grandissante de concepts autour du canevas infini
      Les raccourcis clavier/souris pourront changer, les couleurs, le style pourront changer mais la formalisation perdurera.
      Cette formalisation permet:
        -de créer des liens entre les différents concepts mis au jour
        -au développeur de commencer à réaliser ce qu'il a imaginé (bien qu'il en découvre encore _en faisant les choses_)
        -de construire un langage commun pour les utilisateurs/développeurs
            par exemple, les concepts, une fois appropriés, peuvent être invoqués en classe sur _papier_
        
Cette interface va à contre-courant de (ou au moins vient en décalage par rapport à l') évolution de l'utilisation des ordinateurs.
Depuis les écrans tactiles, on fait comme si l'utilisateur n'avait que 2 doigts (ou au mieux 4).
Avec Une Interface Utilisateur, les mains des utilisateurs -ces merveilles qu'il serait grossier de dénigrer- leurs permettent, au fur et à mesure, 
    d'être comme des joueurs de violon, de plus en plus proche de leur instrument, jouant avec leur propre style,
    comme chacun a sa propre graphie avec un stylo sur le papier.
Pas besoin de matériel coûteux: on revient au clavier/souris basiques, avec des ordinateurs normaux (pas besoin de surpuissance), 
    et un navigateur internet standard (qui fait office de machine virtuelle avec un affichage),
    et sans obligatoirement avoir besoin d'être connecté à Internet. 

Le caractère fondamental des concepts découle du caractère fondamental de la manipulation/transformation d'objets (c'est de la "chimie virtuelle").
Par conséquent, c'est très probable que les découvertes présentées soient les découvertes "faciles". 
Au fur et à mesure, les nouvelles découvertes seront plus sophistiquées et sûrement moins fondamentales.
Les raccourcis clavier/souris pourront être transposés à des appareillages techniques plus modernes quand ceux-ci verront le jour.   

La portée éducative du logiciel est sa raison d'être.
Premièrement,
Elle permet au professeur de présenter de manière interactive et animée des concepts, sans avoir recours aux vidéos, bien trop monolithiques, 
    en suivant son propre style.
Elle permet à l'élève de découvrir des concepts, en autonomie, par des expériences "sans conséquence". On essaie, on verra bien ce que ça donne.
Deuxièmement,
Elle pourrait enfin permettre à des groupes d'élèves de travailler en coopération sur des projets divers (pas forcément mathématiques),
    en continuant à utiliser l'interface qu'ils se seront appropriée,
    voire de créer leurs petits mondes (comme quand les enfants jouent aux Lego et aux PlayMobil, ou a Minecraft).
Elle permet aux professeurs d'exprimer facilement leurs idées, puis de les transmettre dans un format générique, pour éventuellement laisser les devs les réaliser ultérieurement.

Les concepts les plus forts vont être présentés.
    Infinite Canvas (iC)
    0. icObj, icComposite, engine
        tout est objet
        la taille n'a pas d'importance (puisque tout ce qui est de taille fini peut être ramené à une taille "opérable")
        les moteurs permettent d'ajouter de la vie aux objets "minéraux"
        les objets composites permettent de fabriquer des structures complexes
    1. zScroll, et tous les autres scrolls
        zScroll (le retour d'une vieille idée)
    2. opérateurs, formalisme
    3. pathmade: vers la programmation par le dessin
    4. freeDraw: adhere, comb, ..., vDraw
    5. povRect/printPovRect
    6. ic+3dRoom
    Green Mouse (gm)/edu
    7.  gm/touchSlot
        les malédictions
        la forme canonique
        l'aléatoire comme principe de base
    8.  icArray (l'influence d'APL)
        il faut rendre hommage à Iverson, qui a vraiment essayé de trouver un moyen de transmettre les maths différemment
    9.  galaxies d'apprentissage (plus on zoome, plus on se spécialise) (dans iC et dans 3dRoom)  
    10. get100/aliceInjection: autre modes d'interaction: laisser pour un temps le clavier et la souris

-Clavier/souris ? Sérieux ?!
-C'est une étape de transition avant que l'on puisse manipuler sans les mains ("psynipuler")
    Pour l'instant, de la même façon que l'on utilise, depuis quelques siècles, le couteau et la fourchette pour manger,
    ce sont des instruments suffisament conviviaux pour qu'ils soient utilisés comme des prises en escalade, pour se hisser techniquement

zScroll:
    expliquer le zScroll sur la page avec le même texte sous plusieurs formes Géant, normal, minuscule,...


L'interface utilisateur étant principalement visuelle, des illustrations vont naturellement accompagner les concepts.


Les concepts présentés semblent aller de soi ("Pourquoi parler de choses si évidentes ?"),
mais ils constituent une nouvelle façon de véhiculer les intentions des utilisateurs (qu'ils soient devant ou "derrière" l'écran).
L'interface se veut un moyen pour les utilisateurs de manipuler, de créer, d'essayer des choses, c'est à dire de renouer un lien sain avec la machine,
qui soit en continuité avec les manipulations que fait spontanément l'enfant qui se développe.

Une implémentation des concepts présentés dans cet ouvrage a été commencée.
La confrontation des idées avec leur réalisation logicielle est très féconde.
C'est souvent sur l'établi qu'on a des nouvelles idées,
    dont la formalisation donnera de nouvelles idées,
    dont la réalisation donnera de nouvelles idées, etc.
Pour être clair : 
le logiciel que j'ai entamé n'a pas toutes les fonctionnalités du livre,
et,
il reste encore beaucoup de concepts à découvrir.

Les concepts ont souvent été nommés dans une sorte d'anglais qui permet de former des mots en patchwork, compacts et assez clairs.
C'est assez normal étant donné que le développement de logiciel en programmation textuelle demande la création et l'emploi de mots d'une sorte d'anglais-machine.
Mais pas de panique, c'est un livre en français, avec plein de dessins, pour des humains.

------------

InfiniteCanvas (iC)

0. icObj, icComposite, engine
    tout est objet
        Dans Misocroft PoperWoint, il y a des zones de texte, des images, etc.
        Dans iC, c'est la même chose, sauf qu'il y a aussi des objets mathématiques.
        L'exemple type est iCMathNode, qui pour faire simple, représente un nombre.
        Autrement dit, comme dans un langage de programmation classique, on fait la différence entre les nombres et les chaînes de caractères.
        iCImage est une image.
        iCText est du texte.
        iCRect est un rectangle.
        iCSegment est un segment.
        Toutes les sortes d'objets peuvent exister dans iC (il y a même iCInfiniteCanvas...)
        On peut saisir un objet et le déplacer en cliquant dessus et en glissant la souris tout en restant cliqué.
        On peut faire défiler l'écran de façon panoramique (pan), en restant appuyé sur le clic droit de la souris.
        On peut combiner déplacement d'un objet et défilement panoramique pour emmener un objet vers une zone préalablement non-apparente. 
    infiniteCanvas
        Jusque là, c'est comme dans PoperWoint.
        Toute la différence vient maintenant: 
            il y a de la place pour tout le monde : puisque l'espace est infini, quelle que soit la taille de l'objet que l'on veut insérer, on pourra toujours le faire.
        Dans un canevas infini, la zone qui est affichée à l'écran est un point de vue.
        On regarde juste un morceau d'un espace 2D infini.
        On peut zoomer et voir des objets qui étaient tellement minuscules qu'ils n'occupaient même pas un pixel sur l'écran de l'ordinateur.
        On peut dézoomer et voir que l'on était en fait "à l'intérieur" d'un objet très grand.
    Objets motorisés:
        Les objets présentés jusque là, les nombres, les images, les textes, n'ont pas de comportements autonomes.
        Ils sont juste des conteneurs de données.
        On peut les qualifier de "minéraux".                
        Les moteurs permettent d'ajouter de la vie aux objets "minéraux".
        Exemple:
            Avec un moteur de bouton, on peut transformer un objet texte, en un bouton, de telle sorte qu'à chaque fois que l'on va cliquer dessus,
            on va ajouter le caractère '.' à la fin. On passera donc par exemple de "abc" à "abc." puis "abc.." puis "abc..." etc.
        Un même objet peut avoir plusieurs moteurs (tant qu'ils sont compatibles).
    Composites:
        Les objets composites représentent des arbres, enfin des arbres en maths, 
        c'est à dire qu'un composite peut contenir d'autres objets, qui peuvent être des composites, ...
        On peut facilement s'imaginer cela avec des cartons:
            dans un carton, on peut mettre des objets "normaux" (ballon de basket, banane, rouleau de scotch),
                                        et d'autres cartons (avec des choses dedans).
        Les composites qui contiennent un objet sont ses composites parents (il y a sa mère, sa grand-mère, etc.).
        Le composite qui n'est contenu dans rien est le composite racine.
        En pratique, un objet composite est un rectangle (icRect) équipé d'un moteur "composite".
        Un composite peut avoir des parties mobiles, c'est à dire des parties que l'on peut déplacer librement par rapport aux autres,
        et des parties fixes, qui entraînent le déplacement "en bloc" de tout le composite racine.
        Ces objets sont très utiles pour créer des structures (structures de données mais également dispositions visuelles).
            Exemples:
                On prend un nom, un prénom, un âge, une photo et on l'on crée une structure "Elève".
                Lorsque l'on déplace le composite élève, nom, prénom, âge et photo se déplacent en même temps.
                Autrement dit, c'est un objet en soi, de la même manière qu'une voiture, avec ses passagers et son chargement, peut être considérée comme un seul objet.

1. propriétés des objets
    Position généralisée:
        Pour retrouver une information posée sur le canevas, il faut connaître sa position et son échelle.
        Dans la suite, "position généralisée" voudra dire le couple (position,échelle) (on pourrait dire poscaletion en anglais).
    Objets sans échelle, objets avec échelle, objets à moitié avec échelle: 
        On peut commencer par montrer une image (objet avec échelle):
            quand on dézoome beaucoup, on ne la voit plus.
            quand on zoome beaucoup, l'image prend tout l'écran et on peut zoomer sur des détails de l'image(bien que ça devienne flou à partir d'un moment)
        Puis on peut montrer un objet à moitié avec échelle:
            quand on dézoome, il garde la même taille.
            il y a un certain niveau de zoom à partir duquel il grossit sur l'écran.
                Pendant la phase d'approche, on a gagné en précision sur sa position.
        Enfin, on peut montrer la représentation d'un point (un objet sans échelle):
            quand on dézoome, il garde la même taille.
            quand on zoome,   il garde la même taille.
                On peut donc, en zoomant suffisament, connaître sa position avec une précision arbitraire.
    zIndex
        objets spéciaux:
            fantômes
            facade
            doubleObjects
    

2. zScroll, et tous les autres scrolls
    De la bonne utilisation de la molette de souris
        Quand la molette de souris est apparue dans les années 1990, 
        c'était, originellement, pour faciliter la navigation des comptables et des gestionnaires sur des feuilles de calcul avec beaucoup de cellules,
        via des zooms et des dézooms.
        Malheureusement, cette vision n'a pas vraiment été réalisée. La molette a surtout servi à faire défiler ("scroller") verticalement et horizontalement.
        Il a fallu attendre l'apparition des cartes virtuelles pour que la molette retrouve enfin sa mission principale: zoomer et dézoomer.

        L'interface utilisateur est optimale, quand la souris est utilisée de manière optimale.
        Pour une utilisation optimale, il est préférable d'utiliser la molette avec l'index.
        Il s'en suit qu'il est préférable d'interchanger le clic droit et le clic gauche.
        Par la suite, on continuera d'appeler "clic gauche" le clic standard (qui se situera maintenant à droite sur la souris).
            "Clic droit" désignera le clic alternatif (on le fera avec l'index, sur le bouton gauche de la souris).
    zScroll (le retour d'une vieille idée)
        Pour être tout à fait précis, la vision initiale pour la molette de souris n'était pas seulement de zoomer et dézoomer.
        C'était zoomer et dézoomer _pour déplacer_ une valeur d'une cellule à une autre sur la feuille de calcul.
            Autrement dit, ne pas seulement changer le point de vue, mais faire voyager de la donnée.
        Le "zScroll" c'est cette idée, appliquée au canevas infini:
            On attrape un objet, et, alors qu'on zoome et qu'on dézoome, cet objet reste avec nous.
            Le zScroll est tellement facile(on clique, on roule la molette), que l'utilisateur l'utilise rapidement de façon naturelle.
            L'utilisateur prend également conscience que la taille n'a plus vraiment d'importance, 
            puisque tout ce qui est de taille finie peut être ramené à une taille "opérable", en utilisant le zScroll.
        Pour augmenter la vitesse de zoom/dézoom, on peut rester appuyé sur la touche Shift du clavier (touche souvent associée au sprint dans les jeux vidéo),
            et effectuer le mouvement de zScroll classique.
        On n'est pas obligé de garder l'objet saisi. En fait, il suffit qu'il soit sélectionné.
            Le zScroll change alors seulement l'échelle de l'objet et pas sa position.
    les autres scrolls
        Une fois que l'on a compris à quel point le zScroll était agréable, on a envie de tirer le meilleur parti de la molette de souris.
        En appuyant sur une touche du clavier, on peut indiquer que l'on souhaite faire autre chose que le comportement standard, le zScroll.
        En voici quelques uns.
    valueScroll (touche N + molette)
        On saisit un objet nombre, on appuye sur la touche N du clavier et on scrolle: la valeur est incrémentée.
        Pour faire simple, si la valeur était 4, elle devient 5. Si on continue de scroller vers le haut, elle devient 6, etc.
        Si on scrolle vers le bas, la valeur est diminuée.
        C'est une façon de créer le nombre que l'on souhaite.
    opacityScroll (touche V + molette)
        On saisit un objet, on appuye sur la touche V du clavier et on scrolle: son opacité est modifiée.
        On peut facilement créer des objets "un peu transparents".
    colorScroll: on change la couleur de l'objet
    zIndexScroll: on fait passer l'objet au premier plan, ou un peu derrière un autre objet, ou tout au fond, etc.

3. opérateurs, formalisme, commandes
    Il n'y a pas de menu : la transformation des objets se fait sur place.
    Il y a une catégorie d'objets dédiée aux transformations, on les appelle les opérateurs.
    opérateurs standard:
        Pour transformer un objet:
            on se saisit de l'objet, 
            on lui fait toucher un opérateur 
                et l'opérateur s'applique alors à l'objet. 
            Tout simplement.
    Formalisme basique:
        Les objets sont indiqués par des doubles crochets.
            Exemple:
                [[4]] désigne l'icMathNode de valeur 4.
                [["abc123"]] désigne l'icText contenant la chaîne de caractères "abc123"
        Les opérateurs sont indiqués par des simples crochets.
            Exemple:
                [+ 2] désigne l'opérateur qui ajoute 2.
                [EnMajuscules] désigne l'opérateur qui 
        L'interaction entre un objet et un opérateur est indiquée par le symbole '*' et le résultat suit le symbole '='
            Exemples:
                [[4]]        * [+ 2]          = [[6]]
                [["abc123"]] * [EnMajuscules] = ["ABC123"]
            C'est une réaction de chimie virtuelle (* et = correspondent respectivement à + et → dans une réaction chimique).
    opérateurs applicables:
        Il ne se passe rien quand on touche un opérateur applicable avec un objet à transformer.
        Pour l'actionner, pendant que l'objet saisi touche l'opérateur, on fait un clic droit.
        Ces opérateurs sont symbolisés entre parenthèses.
        Exemple:
            (+ 2)
        Ces opérateurs ajoutent une petite couche de protection par rapport aux opérateurs classiques.
    Comment créer des opérateurs ?
        Une première façon de faire est d'entrer en mode "Saisie de Nombre"(en appuyant sur la touche W du clavier) et de taper, par exemple, "+ 2".
        Attention, "+2" fera apparaître l'objet [[2]] alors que "+ 2" fera apparaître l'opérateur [+ 2].
    Remarque en lien avec la programmation:
        Dans un but pédagogique, et pour insister sur les transformations, 
            la valeur que retourne la fonction est directement assignée à l'objet en entrée.
            L'objet entrant subi une mutation.
        Il est tout à fait envisageable, dans une évolution ultérieure, et pour former un public spécifique en informatique,
            de réaliser des fonctions pures pour lesquelles l'objet d'entrée et l'objet de sortie seront bien distincts.
    Les commandes ou comment ne pas créer des opérateurs
        Certaines opérations sont si courantes qu'il est plus confortable pour l'utilisateur de les invoquer sans passer par un opérateur.
        L'utilisateur utilise une commande, symbolisée par !<commande>!
        Il y a un raccourci clavier/souris pour invoquer la commande.
        Exemples:
            !save!          Touche S            enregistrer le contenu du canevas
            !load!          Touche L            charger du contenu sauvegardé
            !import!        Touche I            importer une image, une vidéo, un fichier pdf, un fichier epub,...  
            !deselect!      Touche Espace       Déselectionner l'objet ou le groupe d'objets saisi
            !clear!         Touche K            effacer tout le contenu du canevas
            !clone!         Touche X            Faire apparaître un clone de l'objet sélectionné, à l'endroit où l'objet est actuellement
            !spawn_rect!    Touche F            Faire apparaître un rectangle ayant la couleur courante
            !colorScroll!   Touche C + molette  Changer la couleur courante
            !numberTyping!  Touche W            Créer un nombre, une expression ou un opérateur
            !freeDrawing!   Touche ²            Mode dessin
        Forcément, la maîtrise des commande passe par une phase d'apprentissage, un peu comme pour la guitare, ou un nouveau smartphone.
        Mais, alors que les raccourcis clavier pourront éventuellement changer, pour se conformer à chaque type d'usage, à l'initiative de l'utilisateur,
        les concepts de base seront difficiles à désapprendre. Le vélo change mais ça reste un vélo.

4. opérateurs cheminants (pathmade): vers la programmation par le dessin
    De la même façon que l'on peut créer des objets complexes en utilisant les composites,
    on peut créer des opérateurs complexes en utilisant les pathmade.
    Voici le principe : 
        en dessinant un tapis roulant dont le trajet passe par des opérateurs, on arrive à transformer l'objet de départ selon une séquence bien précise.
    Appelons les des opérateurs cheminants.
    On va naturellement utiliser des illustrations.
    Structures de contrôle:
        switch
            on dessine des branchements
        if
            on dessine des branchements
        boucle
            on dessine une boucle       pour faire une boucle
        clonage
            on dessine des branchements
    Autres développements:
        fonctions avec plongements
    record:


5. freeDraw: adhere, comb, ..., vDraw
    freeDrawingZscroll: 
        Les fonctionnalités de l'interface utilisateur ont été parfois été découvertes comme tentative de mariage de deux concepts existants.
        (Une "matrice d'innovation" pourrait d'ailleurs être utilisée pour essayer d'épuiser de manière exhaustive les ouvertures possibles.)
        Ici, on mélange le dessin à main levée classique avec le zScroll.
        Il en résulte un dessin à main levée dont le trait suit le niveau de zoom. 
        Deux conséquences directes, assez difficile à faire sur du papier physique :
            On peut dessiner très simplement des traits à l'épaisseur variable.
                On peut faire des poils, des spirales...
            On peut créer des dessins pour lesquels l'échelle est une dimension, au même titre que "le x et le y". 
                On peut mettre autant de détails que l'on dans l'arrière plan.
                On peut avoir un arrière-plan de l'arrière-plan, etc.
    freeDrawingZIndexscroll:
        Cette fonctionnalité est inspirée des graffiti. On change la "frontalité" du trait à mesure que l'on dessine.
        Conséquences directes, pratiquement impossibles à faire sur du papier physique :
            On peut dessiner un trait qui s'enroule comme un serpent autour d'un autre trait.
            On peut dessiner un trait qui fait comme un fil de couture sur une face de tissu.
            On peut dessiner des fourreaux semi-transparents dans lesquels on peut insérer ou extraire des objets. 
    adhere:
        Quand un enfant dessine, il découpe parfois le personnage qu'il vient de dessiner car il le considère comme un seul objet,
        alors même qu'il lui a fallu plusieurs traits pour le dessiner.
        L'adhérence réalise cela dans iC : 
            quand on trace un trait en commençant à tracer sur un trait déjà existant, 
            le trait "du dessus" adhère sur le "trait support" et les deux forment un composite.
            On peut alors déplacer les deux traits "en bloc".
        Cela permet de constituer un dessin complexe, de manière constructive, mais sans séparer l'acte de dessiner et l'acte de structurer.
    comb:
        Cette fonctionnalité est inspirée de la peine que l'on a quand on trace des tableaux à la règle.
        L'idée est que si on mettait de la peinture sur chaque doigt de sa main,
        en un passage vertical et un passage horizontal, on aurait un tableau 4x4.
        On choisit le nombre de traceurs que l'on veut utiliser et les traceurs suivent le curseur de manière naturelle.
    combScroll:
        Quand on a 2 traceurs ou plus, le combScroll permet de contrôler l'écartement des traits.
        Il faut s'imaginer dessiner à deux doigts et, tout en les avançant, les écarter et les rapprocher pour former des pincements et des bourrelets.
        On peut s'amuser à tracer des circuits auto, en refermant le parcours sur lui-même.
TODOTODOTODOTODOTODOTODOTODOTODOTODOTODO
    vDraw:
        Que se passe-t-il si on dessine avec autre chose que le stylo ?
        Et si on dessinait avec un objet ?
        Le vDraw consiste à dessiner avec un nombre, 
        $$$$$$$$$$$$$$ pour en donner un
    police facile:
TODOTODOTODOTODOTODOTODOTODOTODOTODOTODO

6. povRect/printPovRect/screenPovRect/portails/icPeer
    Un morceau rectangulaire du canevas infini -aussi petit soit il- est encore infini, car on peut zoomer indéfiniment à l'intérieur.
    En fait, on peut se dire que le rectangle que l'on voit sur l'écran n'est qu'une certaine prise de vue sur le canevas infini.
    povRect: 
        Plus simplement, on peut retrouver un objet en faisant coïncider le cadre de l'écran avec un rectangle qui le contient, de manière "assez proche".
        C'est-à-dire que le rectangle conteneur doit avoir une échelle proche de celle de l'objet.
        On va appeler ça un povRect (rectangle point-de-vue).
        L'utilisateur se balade dans le canevas, trouve un point de vue qui lui plaît et le matérialise :
            tout est objet et le povRect n'échappe pas à la règle, comme [[4]] ou [["Salut"]].
        Cela permet à l'utilisateur de le déplacer facilement.
        L'utilisateur peut retourner à un point de vue particulier en appuyant sur le bouton qui y est associé.
        Il peut bien sûr mettre ce bouton n'importe où.
        De manière astucieuse, en mettant à côté d'un point de vue le bouton vers le point de vue suivant. 
        on peut créer des enchaînement comme les diapositives dans Misocroft Poperwoint,
        mais les transitions seront des glissements avec zooms/dézooms.
        On peut même ajouter des informations qui seront affichées uniquement pendant les transitions.
    printPovRect:
        Les povRects sont utilisés pour faire des présentations dynamiques, ou pour se déplacer dans le canevas.
        Si on se place dans un contexte éducatif, avec l'envie d'imprimer du cours ou des exercices pour les élèves,
        on peut utiliser les printPovRects. C'est le même principe mais ici on va utiliser des formats de page d'impression.
        Exemple: un printPovRect format A4, avec le numéro #1, correspondra à la première page du document à imprimer.
        Ceci permettra de ne pas avoir de mauvaises surprises à l'impression car on précise que ce que l'on voit est ce que l'on veut.
        Le document final pourra être prévisualisé dans le canevas en rassemblant de manière horizontale, toutes les pages capturées.
        Il sera lui aussi un objet du canevas, et donnera d'autres possibilités d'édition (changer l'ordre des pages par exemple).
    screenPovRect:
        le point de vue, correspondant à ce qui est affiché à l'écran, et qui se déplace sans cesse, est appelé screenPovRect.
        Ce que voit ce point de vue peut être rediffusé dans un autre objet : comme un écran qui diffuserait ce qu'une caméra filme.
    portails: voyager, la tête sur la feuille
        Le jeu vidéo Portal a permis aux joueurs de vivre ce qui était par exemple décrit par Dan Simmons dans Hyperion, 
        passer d'un endroit de l'univers à un autre en traversant simplement une porte.
        Sans surprise, dans le canevas infini, on peut faire la même chose.
        Il y a des objets appelés portails qui, quand on les traverse, comme si on plongeait dedans, nous transporte vers un autre povRect du canevas.
        Il peut donc se passer les voyages suivant:
            plongeon:
                on plonge dans un portail et on se retrouve dans une zone "très profonde"
            retour en arrière:
                on plonge dans un portail et on se retrouve dans une zone qui contient le portail que l'on a pris
                Exemple:
                    Le portail dans l'oeil d'une mouche nous fait nous retrouver de la taille de la tour Eiffel, 
                        la mouche étant posée sur un CupriSan, lâchement abandonné sur le sol du 1er étage, au milieu des touristes.
            dépaysement total:
                on plonge dans un portail et la nouvelle zone n'est ni conteneur ni contenu du portail source.
                Exemple: on plonge dans un élément d'une page de livre pour se retrouver quelque part sur la page d'à côté.
        Portails aller-retour:
            le franchissement du portail "dans l'autre sens" nous fait revenir où on était avant.
    iC in iC: hierarchiser mais sans abandonner l'infini
        $$$$$$$$$$$$$$$
    icPeer: tirer le meilleur parti des réseaux locaux
        $$$$$$$$$$$$

7. ic+3dRoom/revisiter les affichages classiques
    iC est un canevas infini 2D.
    3dRoom est la même chose en 3D.
    3dRoom peut contenir des iC.
    Conséquence: On peut se balader librement dans cet espace 3D et s'arrêter pour explorer un espace infini.
    L'affichage peut être capturé pour avoir une vraie sensation 2D,
    où alors, comme une simulation, afficher un tableau comme le voit un élève depuis son bureau dans une salle de classe.
    De la même manière qu'un iC peut contenir des iC, une 3dRoom peut contenir des 3dRoom.
    Cela rend l'espace beaucoup plus grand que la façon dont on a l'habitude de l'appréhender.
    
    L'exploration de ce genre d'espace est comme une chasse aux oeufs psychédélique, dans laquelle il y aurait des oeufs planète,
    des oeufs bactérie, des oeufs galaxie, des oeufs nucléon, etc.
    Chacun peut avoir son petit jardin secret sur un pétale de tournesol.
    chasses aux trésors:
        Dans iC, on peut engager les élèves en leur proposant des chasses aux trésor utlisant les positions généralisées.
        En mathématiques, en particulier, c'est l'occasion, par exemple, de constater que la droite réelle contient vraiment beaucoup de nombres,
        de se repérer sur celle-ci, d'effectuer des mesures.
        
    De la même manière que l'on a changé le scroll habituel de défilement vertical en scroll de zoom,
    on peut commencer à imaginer de nouvelles formes d'affichage de l'information.
    Un livre, au format électronique, c'est une grande colonne de texte. C'est linéaire.
    On peut tout à fait imaginer des "zLivres", exploitant pleinement la dimension "échelle" du canevas infini. 
    Beaucoup d'artistes ont déjà expérimenté les dessins en "z2D" (il y a même des publicités en "zoom zoom zoom zoom zoom").  
    
    Le web pourrait être transformé ainsi, avec une navigation en zoom et dézoom, en plongeons dans les portails.
    Après une période de transition où se cotoieraient vieux style et nouveau style, 
        (imaginer prendre un article sur un site marchant et le déposer dans le panier, ou créer un portail vers une zone de jeu ou un article pour le partager à un ami). 
    Il pourrait y avoir un espace web territorial dans lequel les sites des acteurs locaux d'un territoire seraient affichés:
        le site du boulanger, le blog de mon voisin, le site de l'association de basket, ...
        Plus on dézoomerait, plus on passerait à une échelle nationale, puis internationale.
    Il pourrait y avoir un espace web sémantique où les pages reliées à une page wikipedia lui seraient adjacentes.

    De toute façon, il est impossible de prévoir les conséquences de la mise en place de tels systèmes.

    

------------

Passons à la partie "éducation"

Green Mouse (gm)/edu

9.  gm/touchSlot
        les malédictions
            Les objets du canevas peuvent avoir des malédictions.
            Exemples de malédictions:
                A chaque fois que l'objet est touché par un opérateur, il change de couleur.
                Si l'objet est touché plus de 5 fois par un opérateur, il est détruit. 
        La souris verte(greenMouse, abbrévié en gm):
            Quelques semaines après les premiers essais de canevas infini, l'idée était de créer des emplacements dans lesquels loger des pièces de puzzle.
            Quand on saisissait une pièce et qu'on la passait suffisament près de l'emplacement (snapSlot),
                une représentation de la pièce, sous forme fantôme, bien placée dans logement, indiquait à l'utilisateur qu'il pouvait lâcher
                et la vraie pièce irait prendre cette place.
            Quand l'idée vint d'avoir des nombres comme objets, associer une transformation à un emplacement sembla naturel, 
            et avoir à lâcher puis reprendre puis lâcher à nouveau la pièce sembla un peu inconfortable.
            Appliquer la transformation directement quand le nombre touchait l'opérateur était beaucoup plus rapide et plus confortable.
            Les opérateurs standards qui réagissent au toucher (touchSlots) étaient donc comme des cuves dans lesquelles on trempait l'objet saisi.
            L'objet qui était transformé ainsi faisait penser à la comptine de la souris verte. 
                Une souris verte,
                qui courait dans l'herbe,
                _je l'attrape_ par la queue,
                je la montre à ces messieurs.
                Ces messieurs me disent
                _Trempez-la dans l'huile_,
                _Trempez-la dans l'eau_,
                ça fera un escargot tout chaud. 
            L'objet est effectivement attrapé, puis trempé dans des cuves qui le transforment.
            Au fur et à mesure, le concept de souris verte s'est affiné:
            Malédictions de la souris verte: 
                Quand l'objet est lâché, il meurt.
                Quand l'objet meurt, il ressuscite au point de départ.
            Voilà la souris verte telle qu'elle est utilisée dans le logiciel.
            Elle est utilisé dans un cadre bien précis: les challenges.
            Un challenge est un exercice basé sur les transformations: 
                On montre à l'élève l'objet qu'il doit fabriquer, 
                en utilisant les transformations qui lui sont proposées.
                L'objet qu'il doit transformer est la souris verte.
                Quand l'élève a réussi le challenge, un nouveau challenge (pareil mais différent car généré aléatoirement) lui est proposé.
            Cet objet maudit, la souris verte, présente deux avantages majeurs en terme d'éducation:
                l'élève est obligé de garder la main sur la souris d'ordinateur en gardant le clic gauche appuyé, pour transformer la souris verte, 
                    ce qui réduit de 50% son potentiel de faire des bêtises, et ce qui matérialise son engagement
                l'élève peut faire autant d'erreurs que nécessaire, ce n'est pas grave
                    s'il a appliqué une transformation qui ne lui plaît pas, il lâche la souris verte,
                    et elle revient à son état initial, et il peut essayer une autre séquence de transformations.
        la forme canonique des challenges
            voici comment est composé un challenge, la plupart du temps.
            Il y a trois zones bien distinctes.
            L'objet initial, les opérateurs et l'objet final.
            Le sens de lecture en France est de gauche à droite donc le challenge va de gauche à droite mais on pourrait bien sûr l'adapter de la droite vers la gauche.
        l'aléatoire comme principe de base
            La triche décérébrée est une grande entrave au bon développement des élèves. 
            Pour les protéger d'eux-mêmes, l'aléatoire semble une bonne idée car cela les amène:
                soit à apprendre à se débrouiller seuls
                soit à apprendre à tricher intelligemment
                    s'ils regardent sur l'écran du voisin pour comprendre comment il fait, ils sont en pleine phase d'apprentissage (et donc c'est gagné)
            De plus, la facilité avec laquelle les élèves ont accès aux vidéos, 
            sur lesquelles ils pourraient voir toutes une série d'exercices "codée en dur" résolues pour ensuite reproduire leurs solutions betêment,
            rend l'utilisation de l'aléatoire incontournable, si on a envie de faire travailler le maximum d'élèves.
            La création d'un langage de domaine spécifique (DSL) à la création de challenges semble de plus en plus nécessaire.
            C'est aussi une compétence que l'on pourrait attendre des professeurs des générations à venir,
            à moins qu'une interface en langage naturel, contrôlé par la voix, suffise pour une utilisation de tous les jours... 
        
10.  icArray (l'influence d'APL)
    L'influence d'APL
        Il faut rendre hommage à Kenneth Iverson, qui a vraiment essayé de trouver un moyen de transmettre l'algèbre différemment,
        bien qu'il soit malheureusement maintenant souvent casé dans le rayon des curiosités de l'informatique.
        Le langage de programmation APL, créé par Iverson, est composé de beaucoup de symboles, qui sont chacun reliés à un concept particulier (2 en fait mais faisons simple).
        Il y a beaucoup de similarités entre Une Interface Utilisateur et APL car les deux sont:
            très visuels (c'est-à-dire pratiquement sans texte)
            basés sur des chaînes de transformations
            parti d'une volonté de faire de l'algèbre différemment
        Tous les concepts présentés jusque là ont comme finalité la célébration de la créativité et de l'ouverture à de nouveaux concepts.
        Une des façons digestes de présenter un nouveau concept (mathématique) est présenter une de ses transformations caractéristiques sous forme d'un opérateur unaire, 
            qui va transformer l'objet en entrée en un autre objet en sortie.
        Mais ensuite, pour pouvoir comprendre dans des cas de figure moins dirigés, en expérimentant plus librement,
        il faut souvent partir de 2 objets en entrée (ou plus), qui vont se transformer en 1 objet (ou plus) en sortie.
    Les tableaux:
        L'astuce mathématique pour continuer à faire le raisonnement "j'ai un objet qui se transforme en un objet" est de considérer les objets en entrée dans leur totalité.
        Au lieu de dire "2 brins de folie, traversant le chien et la chienne, ont donné 3 chiots", on dira "la pelote a donné une portée".
        Autrement dit, un tableau en entrée s'est transformé un tableau en sortie.
        Le canevas infini présente un avantage net sur les autres interfaces graphiques : on peut manipuler des objets de taille quelconque.
        Si l'objet apparaît trop grand à l'écran, on dézoome avant de le saisir, on zscrolle pour le ramener au niveau de zoom souhaité, en version petite.
        Dans Une Interface Utilisateur, il y a des composites "tableau". Pour garder une correspondance directe avec le code informatique textuel,
        les tableaux sont arrangés de manière horizontale, le premier élément à l'extrémité gauche, le dernier à l'extrémité droite.
        On peut donc saisir et transformer des tableaux à l'écran et il y a des transformations qui tirent parti du côté visuel de l'interface.
    Fabriquer des tableaux:
        Les tableaux sont très utiles à manipuler, il faut donc pouvoir les fabriquer facilement.
        Encore une fois, Une Interface Utilisateur tente de s'aligner sur les manipulations basiques de la vie.
        Pour avoir trois noisettes dans la main, les enfants en prennent une avec pouce et index, 
        la bascule et la garde saisie dans leur paume avec les autres doigts, et font pareil pour la seconde et la troisième.
        Ce qui représente la saisie continue d'un objet est le maintien appuyé du clic gauche.
        Heureusement, la souris a 2 clics. Le mouvement va donc être le suivant, on saisi le premier objet avec le clic gauche et on reste appuyé.
        On ajoute le deuxième objet au tableau en faisant un clic droit quand on se trouve au dessus : un tableau à 2 éléments est maintenant saisi.
        On continue ainsi de suite.
        On pourra alors utiliser un opérateur qui considère le tableau comme un seul objet ([[2 3 4]] * [+] = [[9]]),
        ou un opérateur qui travaille seulement sur l'élément du tableau qui l'a touché (voir l'exemple).

11. eduDemos/warp/donutOperators
    eduDemos:
        Hors de phases d'exploration autonome, l'élève peut bien sûr compter sur son professeur pour lui transmettre les concepts.
        Une Interface Utilisateur est un conteneur d'interactivité. Elle peut servir au professeur, comme un super tableau blanc,
        à créer, en direct, devant les élèves, des environnements dédiés à tel ou tel concept de tel ou tel chapitre du cours.
        Ces situations sont appelées eduDemos. Elles combinent des manipulations du professeur et des parties automatisées.
        Elles ont chacune leur propre disposition graphique. Le professeur peut écrire, mettre des flèches, pendant la présentation.
        Le professeur peut également réagir aux questions des élèves en essayant de faire ce qu'ils proposent et voir ce qu'il se passe 
        (une exploration avec un guide). Par exemple, changer des valeurs, ajouter d'autres objets, ...
        La conception d'eduDemos de qualité semble être une bonne ouverture, 
        une bouffée d'air pour les professeurs qui ont envie de faire les choses à leur manière.
    
        Dans les logiciels de géométrie dynamique, les objets sont les points, les segments, les cercles, les courbes...
        Ces logiciels sont très puissants pour faire surgir des motifs dans nos cerveaux : 
            en faisant varier certains paramètres, on voit ce qui change et ce qui ne change pas (différent mais finalement pareil).
            On comprend alors ce qu'est la médiatrice d'un segment, en faisant varier le segment. 
        Pourquoi ne pas généraliser ces outils pour les nombres et les structures informatiques de base ?
        Pourquoi ne pas généraliser ces outils pour les mots et les textes ?
        Le parti pris est le suivant: en ayant un seul et même outil, un seul et même cadre (bien qu'infini) pour manipuler nos outils conceptuels de base, 
        on ne fragmente pas la connaissance, on la consolide.
        Tout cela découle du canevas infini: puisqu'il peut contenir une quantité d'information illimité et donne l'utilisateur un moyen facile d'y naviguer,
        plus besoin de cloisonner.
    Un exemple de concepts émanant de la préparation d'une eduDemo: la commande !warp! et les semi-scale objects
        Il n'y a plus de raison de se priver d'un espace généralisé pour les mathématiques, 
        où l'on pourrait étudier des fonctions, tracer des figures géométriques, faire des calculs,
        dessiner des graphes, écrire des algorithmes et les exécuter, manipuler des propositions logiques, 
        créer de nouveaux symboles, et d'autres objets encore inconnus.
        La création d'une eduDemo passe souvent par la décomposition d'une activité élève en sous-parties.
        Le fait d'associer toute transformation à un opérateur amène à expliciter le processus de transformation de l'information,
        de l'énoncé jusqu'à la solution complète d'un exercice par exemple.
        Voici un exemple concret:
            Quand les élèves apprennent la numération, on leur présente la demi-droite réelle.
            On leur demande de repérer des points sur cette droite à partir de leur abscisse.
            Si je te donne le nombre 4, tu le places où sur cette règle graduée ?
            Si je ne laisse que les graduations pour le 0 et le 1, est-ce que tu arrives encore ?
            La notion de la nature d'un objet est importante dans l'apprentissage des mathématiques.
            On passe du temps pour expliquer aux élèves qu'un point, ce n'est pas un nombre.
            Il est cependant, à mon sens, dommageable de contraindre, a priori, la transmission par une complexité qui n'a, encore une fois a priori, pas lieu d'être.
            L'opérateur [warp], ou la commande !warp! (Touche E), permet d'envoyer un nombre sur la droite réelle, centré sur le point dont il est l'abscisse.
            On imagine facilement une activité où le professeur préparerait une liste de nombre, et après une concertation avec ses élèves,
            utiliserait la commande !warp! pour voir où le nombre se serait téléporté. 
            Certains nombres, comme 100, seraient dans un premier temps introuvables, 
            mais seraient retrouvés après plusieurs déplacements panoramiques ou un dézoom/zoom.
            Puis cela amènerait la discussion sur la position précise des nombres et la nature particulière du point.
        Objets sans échelle, objets avec échelle, objets à moitié avec échelle: 
            Pour bien montrer la différence entre un point et un disque, on peut expliquer aux élèves le défi que constitue la représentation du point.
            On peut commencer par montrer une image (objet avec échelle):
                quand on dézoome beaucoup, on ne la voit plus.
                quand on zoome beaucoup, l'image prend tout l'écran et on peut zoomer sur des détails de l'image(bien que ça devienne flou à partir d'un moment)
            Puis on peut montrer un objet à moitié avec échelle:
                quand on dézoome, il garde la même taille.
                il y a un certain niveau de zoom à partir duquel il grossit sur l'écran.
                    Pendant la phase d'approche, on a gagné en précision sur sa position.
            Enfin, on peut montrer la représentation d'un point (un objet sans échelle):
                quand on dézoome, il garde la même taille.
                quand on zoome,   il garde la même taille.
                    On peut donc, en zoomant suffisament, connaître sa position avec une précision arbitraire.
        

12. galaxies d'apprentissage (plus on zoome, plus on se spécialise) (dans iC et dans 3dRoom), cartographie de scolarité, liens entre disciplines
    Vue de loin, une carte qui ressemblerait à un arbre, une gigantesque carte mentale, pourrait accueillir, en complément des cours en classe,
    une collection canonique des savoirs qu'un élève rencontre dans sa scolarité.
    Il y aurait une branche pour les mathématiques, une branche pour le français, etc.
    Dans les maths, une sous-branche pour l'algèbre, une sous-branche pour la géométrie, etc.
    Puis des portails assureraient la destruction de l'ordre apparent en mélangeant les sous-branches, les disciplines, etc.

    Plongeon dans la connaissance:

        
    Mémorisation:
        Les élèves pourront mémoriser plus facilement car ils spatialiseront les chapitres et les exercices.
        Ils pourront aussi faire des dessins pour égayer leur univers d'apprentissage et de création.
        Refaire le chemin, en passant par des zones élémentaires pour aller à leur zone de travail actuelle, réactivera les concepts.

13. get100/aliceInjection: autre modes d'interaction: laisser pour un temps le clavier et la souris
14. coop (mon chez moi, ton chez toi)
        mon espace d'étude, de création
        ton espace d'étude, de création
        et la possibilité d'accueillir l'autre

Conclusion:
    J'espère que vous avez compris l'apport majeur du canevas infini et des fonctionnalités qui en découlent naturellement.
    J'espère que vous avez expérimenté mentalement les transformations, les déplacements qui s'effectuent normalement sur un ordinateur, avec un clavier et une souris.
    Si vous voulez voir si une de vos idées géniales, qui vous serait apparue en lisant le livre, a déjà été couchée sur le papier,
    ou si, tout simplement, vous voulez d'autres concepts, écrits dans un style plus brut,
    il y a still_shute.txt
    
    Ce livre se veut être une invitation.
    Il reste encore énormément de travail. Tant mieux.
    Il reste encore énormément de concepts à découvrir. Tant mieux.
    Si on veut que les élèves ou finalement tous les ordinateuristes en bénéficient au plus vite, il va falloir s'y mettre.



1600-2000 lignes c'est déjà bien
    20 lignes par page, 100 pages