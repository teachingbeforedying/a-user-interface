04 décembre 2020:
	0 infinite zoom (==depth) canvas html5
		0 Milton
		  https://github.com/serge-rgb/milton
**	1 https://github.com/TomHumphries/InfiniteCanvasWhiteboard  -->  https://infiniboards.com/
			1 check out the code
				1 index.html
					only 300 lines of code, all canvas related

	0 infiniteShu
			0 import img

				<p>Image to use:</p>
				<img id="scream" width="220" height="277" src="img_the_scream.jpg" alt="The Scream">

				<script>
				window.onload = function() {
				  var c = document.getElementById("myCanvas");
				  var ctx = c.getContext("2d");
				  var img = document.getElementById("scream");
				  ctx.drawImage(img, 10, 10);
				}
				</script>

				1 get img
					=> express
					1 >npm init
					1 npm install express
					1 app.get('/', function(req, res) {
  						res.sendFile(__dirname + '/index.html', {}, function(err) {

				1 draw img
				1 draw scream at zoom
					1 document.addEventListener('keypress', handleKeyPress);
					0 drawing.Line
					0 drawing.Img

				 1 img extent
					1 trueRect / screenRect
						1 getWindowRect
								cursorX = event.pageX;
		            cursorY = event.pageY;
		            const scaledX = toTrueX(cursorX);
		            const scaledY = toTrueY(cursorY);

*[
								// coordinates of our cursor
				        let cursorX;
				        let cursorY;

				        // distance from origin
				        let offsetX = 0;
				        let offsetY = 0;

				        // zoom amount
				        let scale = 1;
*]

							1 getCanvasBoudingRect()
*							1 toTrueRect(rect)    /   toScreenRect(trueRect)
							void ctx.drawImage(image, dx, dy, dWidth, dHeight);
				=> Zimage
				1 import any image
					1 I for import

					0? angular
						ctrl.processInput = function(event){
								const fileList = event.target.files;
								//console.log("fileList:", fileList);

								const file = fileList[0];
								ctrl.onNewInput({file: file});
						};

					1 input
						<input type="file" id="file-selector" accept=".jpg, .jpeg, .png">
						<script>
						  const fileSelector = document.getElementById('file-selector');
						  fileSelector.addEventListener('change', (event) => {
						    const fileList = event.target.files;
						    console.log(fileList);
						  });
						</script>

						function openFileOption() {
							document.getElementById("file-selector").click();
						}

					1 Uncaught TypeError: Cannot read property 'img' of undefined
				    	at redrawCanvas ((index):162)
				    	at HTMLCanvasElement.onMouseWheel ((index):632)

			1 save / load
			infinishute_lol : 424 ko
				==>>files will be big (but it does not matter for the moment)
			0 povRect
				0 save
				0 moveToPovRect
				0 moveToPovWithPointAndZoomLevel

			0 defaultPOV

			0 cypher infinishute

			0 paste img

				document.onpaste = function(event)
				{
				    var items = event.clipboardData.items;
				    console.log(JSON.stringify(items)); // will give you the mime types
				    var blob = items[0].getAsFile();
				    var reader = new FileReader();
				    reader.onload = function(event)
				    {
				        console.log(event.target.result)
				    }; // data url
				    reader.readAsDataURL(blob);
				}


			0 embed all javascript in html page
			0 share on github
			0 don't draw if too small
			0 delete zimage


			0 create zoom loops

*	0 there is so much space, that one can hide messages in the vast infinity

05 décembre 2020:

	0 paste
		1 copy image
		1 it works also with screen capture
		0 copy file does not work

	0 échelle
		0 double flèche
		0 fabric.js
	0 dépose
		0 mesure
		0 fine tuning
		0 layer
		0 canvas objects
	0 parcours
		0 arbre
		0 notation 0-20 : nb_questions = n(n-1)/2 = 190
	0 auto open file
	OR
	0 embed content
	0 enable/disable buttons (import image, etc.)

	0 scroll : precise / coarse, scroll intensity
		0 scroll + key

	onkeypress : invokes JavaScript code when a key is pressed
	onkeydown  : invokes JavaScript code when a key is held down (but not yet released)
	onkeyup    : invokes JavaScript code when a key is has been released after being pressed.


	document.addEventListener('click', function (e) {
		if (e.ctrlKey) {
			console.log('With ctrl, do something...');
			return;
		}
	});

	https://stackoverflow.com/questions/13873579/disable-zoom-in-browser-using-jquery-javascript

	$(document).keydown(function(event) {
	if (event.ctrlKey==true && (event.which == '61' || event.which == '107' || event.which == '173' || event.which == '109'  || event.which == '187'  || event.which == '189'  ) ) {
					event.preventDefault();
			 }
			// 107 Num Key  +
			// 109 Num Key  -
			// 173 Min Key  hyphen/underscor Hey
			// 61 Plus key  +/= key
	});

	$(window).bind('mousewheel DOMMouseScroll', function (event) {
				 if (event.ctrlKey == true) {
				 event.preventDefault();
				 }
	});



	const scaleAmount = -deltaY * scroll_step;
	scale = scale * (1 + scaleAmount);



	0 fabric
		0 rm redrawCanvas()

		0 Uncaught TypeError: canvas.addEventListener is not a function
					<anonymous> http://localhost:3000/:971

		0 Uncaught TypeError: canvas.getBoundingClientRect is not a function
		0 canvas.renderAll()

		0 the loop:
			on drag: setPov
			updatePositions

		0 if object.zPosition is close to current zoomLevel : object can be selected


		0 manage container ("auto group")

					0 if (rightMouseDown) {
									// move the screen
									offsetX += (cursorX - prevCursorX) / scale;
									offsetY += (cursorY - prevCursorY) / scale;
									redrawCanvas();
						}



					const point_screen = {
						x:0,
						y:0,
					};

					updateScreenPosition(point) {
						point_screen.x = point.x;
						point_screen.y = point.y;

						updateFabricObjectsPosition();
					}

	aCoords.tl.x
	aCoords VS oCoords
	https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords
	Some actions require calling object.setCoords() in order to make the control positions recalculate.

	fObj.trueRect
		0 ? wrapper
	1 onMouseMove
		1 updateDOffset()
		0 move multiplier (slow / fast)
	0 onMouseWheel
		0 updateScale()
			0 centeredZoom
		0 updateScaleAndDOffset() :
			0 zoom where the cursor is

	0 onTouchMove

	0 make if fluid
	0 fabric image
	0 fabric text
		0 updateFontSize(scale)

	0 console.log slows screen refresh a lot

	0 around fabric
		0 move / resize / rotate
		0 copy / paste / cut
		0 delete object

	0 serialization


06 Décembre 2020:

*	0 Zoom-in
		0 rectangular selection
		0 x10 rectangle

	0 Arrow:
		0 "horizontal arrow" : 10 fois plus loin
		0 "vertical arrow"   : 10 fois plus grand
		0 "oblique arrow"    : itinéraire (ou mesure)

	0 "les deux amoureux" (each is on a planet)
	0 itinéraire:
	 		0 select pointA, pointB
			0 draw arrow
				0 orientation automatique de la flèche représentant l'ordre de grandeur courant en fonction de la flèche "itinéraire"
			0 find order of magnitude and "get there" (show the arrow with the "right size" wrt screen)

fObj.left = (fObj.trueRect.left + offset.dx) * scale

	0 Digit0|Numpad0 : move to initial pov
		=> let offset         = Object.assign({}, coords_initial.offset);
*		0 toaster "moved to initial pov"

	0 register pov
	0 Digit1|Numpad1 : move to pov #1, etc.

*	0 A + number : move to pov with animation
		penultimate
*		1 const [lastItem] = arr.slice(-1);

image.scaleToWidth(service.canvas.getWidth());

	0 PAUL's vision:
    deux calculs
      L'abscisse est la réponse à la question 1
      L'ordonnée est la réponse à la question 2
      Abscisse et ordonnée par rapport au _repère courant_

      avec un repérage "A1":
      on peut utiliser les préfixes comme indicateur de colonne

    tableau d'un peintre: fractale

_
AND THEN HE REALIZED IT ALREADY EXISTED : geogebra
	0 geogebra pros:
		anyone can access it
		geometry features
		scripts can be used on objects
		croquis
		scroller
		layers
		axes
		grid
		snap to grid
		nice zip format (.ggb) (only serializes image once when used multiple times)
	0 infinishu pros:
		0 I can do crazy things
			0 loops
		0 I can customize the way I want
		 	0	can create my GUI
			0 can add any lib
		0 I can cypher the file
		0 I can obfuscate the code

0 from question A to question B:
	0 create line from A to B and follow it in the direction of the arrow till you meet the next exercise
	0 warp

0 from question A,B and C to question D:
	0 triangulate


08 décembre 2020:

* Fabric canvas has zoom property
		http://fabricjs.com/fabric-intro-part-5#pan_zoom

canvas.on('mouse:wheel', function(opt) {
  var delta = opt.e.deltaY;
  var zoom = canvas.getZoom();
  zoom *= 0.999 ** delta;
  if (zoom > 20) zoom = 20;
  if (zoom < 0.01) zoom = 0.01;
  canvas.setZoom(zoom);
  opt.e.preventDefault();
  opt.e.stopPropagation();
})

		0 ? is it compatible with infinite canvas 'requirement' ?


	0 track object move

canvas.on('object:moving', function(e) {
  var obj = e.target;

});

* 0 Fabric has animation features


** https://stackoverflow.com/questions/23418055/fabricjs-double-click-on-objects

0 event listeners
	1 fObj.on("moving") fObj.on("modified")

	0X fabric.util.addListener(canvas, 'object:modified', function (event, self) {
			|-> Uncaught TypeError: t.addEventListener is not a function
    			at Object.fabric.util.addListener (fabric.min.js:1)


09 décembre 2020:
	0 fabricjs editor:

		https://github.com/danielktaylor/fabric-js-editor
		simplicity:
		https://codepen.io/mhayr/pen/XWWawwR
		save:
		http://fabricjs.com/kitchensink


		https://www.npmjs.com/package/@axceta/angular-editor-fabric-js

	0 fabric.IText (interactive text)
		0 ignore keyboard shortcuts events while editing text

	1X text.fontSize
			|-> text is not sharp when zoomed in
			=> fObj.scaleX, fObj.scaleY

		https://stackoverflow.com/questions/33692728/fabric-js-increase-font-size-instead-of-just-scaling-when-resize-with-mouse/33693456
		https://www.geeksforgeeks.org/how-to-lock-uniform-scaling-of-a-text-canvas-using-fabric-js/

		fabricjs' uniform scaling lock (== keep proportions)
			There's a number of other transformation-related properties available in Fabric since version 1.0.
			One of them is "uniScaleTransform" on canvas instance.
			It's false by default, and can be used to enable non-uniform scaling of object;
			in other words, it allows to change object's proportions when dragging by the corners.

			=> trueFontSize (== starting_font_size * starting_scale)


			scale 1.0616832
			(index):296 fontSize 42.467328
			(index):296 fontSize 24.576
			(index):296 fontSize 1.914140241657432
			(index):296 fontSize 0.1533454044949374
			(index):296 fontSize 0.01194354694079574
			(index):296 fontSize 0.0011162902259522283
			(index):296 fontSize 0.00007245334346734032
			(index):296 fontSize 0.000003918848684055575
			(index):296 fontSize 7.125594164226069e-8
			(index):296 fontSize 5.089337617391772e-10
			(index):296 fontSize 1.3275055369709617e-11
			(index):296 fontSize 1.5033048482491563e-7
			(index):296 fontSize 1.2043260207222777e-8
			2(index):296 fontSize 4.649401161632606e-9
			(index):296 fontSize 1.409914756957336e-10
			(index):296 fontSize 4.7217759939682745e-11

			|-> problèmes d'arrondi
				=> 1 scale and fontSize should work together to keep it perfect (==not shifting)
*						=> if fontSize > 10000 : use scaleX scaleY
							|-> text is blurry when getting closer
								=> (0 text as SVG


	0 double click when zoomed : edit IText with closest zoomLevel

		event:added
		event:removed
		event:selected
		event:deselected
		event:modified
		event:modified
		event:moved
		event:scaled
		event:rotated
		event:skewed
		event:rotating
		event:scaling
		event:moving
		event:skewing
		event:mousedown
		event:mouseup
		event:mouseover
		event:mouseout
		event:mousewheel
		event:mousedblclick
		event:dragover
		event:dragenter
		event:dragleave
		event:drop

	1 fabric.Rect
		1 move
		1 scale
			/**
	     * Scales an object (equally by x and y)
	     * @param {Number} value Scale factor
	     * @return {fabric.Object} thisArg
	     * @chainable
	     */
	    scale: function(value) {
	      this._set('scaleX', value);
	      this._set('scaleY', value);
	      return this.setCoords();
	    },

*[
		//not used:
		// width:  target.trueRect.width  * scale,
		// height: target.trueRect.height * scale,

		//used instead:
		width:  target.trueRect.width,
		height: target.trueRect.height,

		scaleX : original.scaleX,
		scaleY : original.scaleY,
*]


J:\content\PROF\ARIANE\4e\séquencePuissances\INFINISHU\nodeapp>cmd /k node index.js
server is listening on 3000
_http_server.js:246
    throw new ERR_HTTP_INVALID_STATUS_CODE(originalStatusCode);
    ^

RangeError [ERR_HTTP_INVALID_STATUS_CODE]: Invalid status code: undefined
    at ServerResponse.writeHead (_http_server.js:246:11)
    at ServerResponse._implicitHeader (_http_server.js:237:8)
    at ServerResponse.end (_http_outgoing.js:779:10)
    at J:\content\PROF\ARIANE\4e\séquencePuissances\INFINISHU\nodeapp\index.js:21:34
    at J:\content\PROF\ARIANE\4e\séquencePuissances\INFINISHU\nodeapp\node_modules\express\lib\response.js:434:22
    at onaborted (J:\content\PROF\ARIANE\4e\séquencePuissances\INFINISHU\nodeapp\node_modules\express\lib\response.js:1027:5)
    at Immediate._onImmediate (J:\content\PROF\ARIANE\4e\séquencePuissances\INFINISHU\nodeapp\node_modules\express\lib\response.js:1067:9)
    at processImmediate (internal/timers.js:456:21) {
  code: 'ERR_HTTP_INVALID_STATUS_CODE'
}


11 décembre 2020:
	0 pov : save/load state : shift-number to save/ number to load(==move to pov)
*	0 use classes in script
**	0 class XIntegration {}
		0 have it working

			InfiniteCanvas
			State

			Geometry
			POV

			Animation

			ZImageIntegration
			FabricIntegration

			FileIntegration

			KeyboardIntegration
			MouseIntegration
			TouchIntegration

0 content:
	https://coursdemathematiquesaucollege.wordpress.com/category/cartes-mentales/

**0 import pdf

0 workflow :
		0 import mind map pdf
		0	enrich the map by adding
				0 neurohandle images : a goat, a lion,
					0 associate biome to zoomLevel
				0	content inside those neurohandles : exercices, problems, figures...

* 0 hardcore : zoom trap : when zooming out, user does not get to previous scene, but sees zoomed out current scene

13 décembre 2020:
	C'est à la fois motivant et démotivant d'avoir un zozo qui fait autre chose dans la même pièce

	1 class InputProperties:
			scrollProperties
			etc.

	0 keyboardIntegration.registerCallbackForKey("KeyI", () => fileIntegration.importImage());

	0 infiniteCanvas.fabricIntegration = this;
	0 this.infiniteCanvas.requestRedraw();


*	0 Model : InfiniteCanvas VS ViewController: FabricCanvas
		1 create model object
			1 user input
		1 show it in view
		0 fObj.on("moved") ==> update model
			0 icObj.id

14 Décembre 2020:
**Z-PUZZLE: bring object back to its corresponding slot (object can be extended, shrinked)
		0 click and scroll to change size
			0 long click| long press to lock obj selection

	1 fObj.on("moved") ==> 	model.update(icObj)		==>? redrawCanvas ?
			fObj.icObj.onUpdate(refreshCanvas = false)

15 Décembre 2020:
	0 resize
		1 fObj.on('scaling')
		1 z-resize: select then scroll
			0 ? keep topLeft VS keep center ?
*			1 updateFabricObjectsPosition|Size(redrawOccasion)
				from original redrawOccasion event
				to final redraw
				1 icObj.update

**	0 what is "fObj.original" after a zScroll ?
	 (0 cancel resize

 (0 rotate
		0 icObj.orientation

**Z-Puzzle avec des carrés : inscrire un nombre dans le carré, avec une double flèche pour indiquer la longueur du côté, _à l'intérieur_

0 Z-Puzzle Logo : write Z-Puzzle with squares of different sizes

	0 ZPuzzle
		0 class ZPuzzle
			0 keep zPuzzle at the back
		0 class ZPuzzleSlot
**		0 slot.tolerance
			0 slot.snap

			0 slot.border

			0 slot.content
C'est dommage, si j'avais fait ça en angularJS, j'aurais pu tout récupérer de cn

		0 WOW effects :
			0 puzzle pieces are on a blue background : blue background is only a small (blue) part of a big piece of the puzzle
			0 puzzle pieces are on a table : the table is a part of a big piece of the puzzle

		contentContainer:
			0 create group with fabric.Text inside and see how it resizes


before going further :
	0 a simple infinite canvas editor
		1 add rect
		0 add image
			1 get image
			1 resize
			0 correct spawn size
		0 add text
			0 resize
			0 manage blur when small (fontSize?)
			0 correct spawn size
			0 text changed (IText)

			0 fabric pattern :
			text.set('fill', new fabric.Pattern({
				source: img,
				repeat: document.getElementById('repeat').value
			}));
				0 regarder ce que ça donne quand on zoome beaucoup (fontSize > 10 000)


		0 move   objects
		0 rotate objects

		0 draw
			0 draw when key alt down
*			http://fabricjs.com/freedrawing : creates object for us when drawing is done
			fabric.freedrawing

		0 fabric.interaction
			0 create groups

		0 save/load
		0 zoom-in to cursor


scaleToWidth: function(value, absolute) {
      // adjust to bounding rect factor so that rotated shapes would fit as well
      var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();
      return this.scale(value / this.width / boundingRectFactor);
    },


** 1 icObj.scale VS icObj.homeScale
			fabricScale = icObj.scale * icObj.homeScale
*			homeScale : the scale at which the object is sharp
*			homeScale is a position (~it is pos.z)
			whereas scale is an inner property

			homeSize = size * homeScale

*			1 zScroll simply updates object's homeScale

			1 icObj.homeScale.X
			1 icObj.scale.X
			(0 icObj.perceptionScale.X

			0solved fObj.darkScale
				fObj.darkScale : if (darkScale != -1) {doStuff; darkScale = -1;}

			0solved offsetChanged: do not update fObjs' sizes

			0solved zoomed-in square gets bigger and bigger when adding more squares
				icObj.perceptionScale

16 Décembre 2020:
	(0 Essayer la "darkScale"
	(0 réflechir théorique si la darkScale ne fonctionne pas
**	=> ! LA VALEUR POUR LA HOME SCALE N'ETAIT PAS BONNE, puisqu'il y a une fObj.scale != 1

	0 puzzle creation :
		0 image split
		0 create puzzle piece using cutting path

	0 commencer par un petit Z-puzzle à 4 pièces :
			initialisation : toutes les pièces sont carrés, de la même taille, de couleur différentes avec un numéro différent (1,2,3 ou 4)
			le slot pour le numéro 1 est très grand, on voit dans la vue initiale un petit morceau de bordure de 1
			le slot pour le numéro 2 est de taille initiale
			le slot pour le numéro 3 est petit mais on peut y arriver avec un resize classique
			le slot pour le numéro quatre est très petit


before going further :
	0 a simple infinite canvas editor
		1 add rect
			1 correct display at any zoom-level
			1 resize
				1	z-scroll
*[
	homeScale_new = {
		X: scale.X / (scale_fObj.X / icObj.scale.X),
		Y: scale.Y / (scale_fObj.Y / icObj.scale.Y),
	};
*]
				1 standard resize (handles)
					1 proportionnal
						=> update homeScale
					1 X-resize | Y-resize
						=> update scale
					1 manage position change

		0 add other shapes

		0 add image
			1 correct display at any zoom-level
			1 get image
			1 resize
				1	z-scroll
				1 standard resize (handles)
					1 proportionnal
						=> update homeScale
					1 X-resize | Y-resize
						=> update scale
					1 manage position change
			1 correct spawn size

			0 fabric image filters :
				0 blend color
				0 blend image

		0 add text
			1 correct display at any zoom-level
			1 resize
				1	z-scroll
				1 standard resize (handles)
					1 proportionnal
						=> update homeScale
					1 X-resize | Y-resize
						=> update scale
					1 manage position change

			0 ? manage blur when small (fontSize?)
			1 integer fontSize
			1 correct spawn size
				 1 correct spawn fontSize
			1 text changed (IText)
				1 update icObj.text

			0 fabric pattern :
			text.set('fill', new fabric.Pattern({
				source: img,
				repeat: document.getElementById('repeat').value
			}));
				0 regarder ce que ça donne quand on zoome beaucoup (fontSize > 10 000)


		1 move   objects
		1 rotate objects
			1 standard rotate
			0 r-scroll: rotate wrt screen center

		1 rotate canvas
			1 alt-right mouse
			1 alt-scroll

*[
Signed angle between two vectors:

angle = acos(dotProduct(Va.normalize(), Vb.normalize()));
cross = crossProduct(Va, Vb);
if (dotProduct(Vn, cross) < 0) { // Or > 0
  angle = -angle;
}

function dotProduct(v1,v2) {
	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}

function crossProduct(v1,v2) {
	return {
		x: v1.y * v2.z - v1.z * v2.y,
		y: v1.z * v2.x - v1.x * v2.z,
		z: v1.x * v2.y - v1.y * v2.x,
	};
}

*]

	? offset is now offset wrt orientation

on oriente, on décale, on dézoome,

	1 rotation(angle, _center_)
		entire referential rotates around rotation center

		1 create debug axes

toTrueX:
toTrueY:


	1 updateWithDRotation -0.1648536097536525 {x: 766.5, y: 624.5}
		(index):801 this.offset {dx: 0, dy: 0}
		(index):809 rotationBaseVectors {u: {…}, v: {…}}u: {x: 0.9999958607528129, y: -0.0028772343041311684}v: {x: 0.0028772343041311684, y: 0.9999958607528129}__proto__: Object
		(index):815 offset_new {dx: NaN, dy: NaN}
		=> /!\ offset.dx !!!

	1 updateDorientation:
		KeyP : increase orientation
		KeyM : decrease orientation

	1 draw rotation :
		1 center
**		0 createFabricPoint == createFabricCompositeObject 		(point == circle + label)
		1 circle
		0 infiniteCanvas.toolsIcObj

		KeyC: add circle
		KeyD: add point

* pure_icObjects: they are not subject to offset, orientation or scale

	1	canvas rotation breaks previous stuff
	 	1 move
		1 resize
		1 rotate
			std rotate is based on fObj's center point
			(0 add circle to see what's going on

			triangle.rotate(angle);
				Sets "angle" of an instance with centered rotation
				should rotate the triangle on it's central rotation.
			This acts differently to triangle.set('angle', 90) which seems to rotate based on the top left corner.
**	=> simplicity ftw   (I tried too complicated, when it was just so easy)
		1 load rotated canvas
		1 zoom-in to cursor


	0 altKey does not unlock

		1 initialize fabric properties
			fabric.Object.prototype.transparentCorners = false;
		0 draw
			1 draw when key alt down
*				http://fabricjs.com/freedrawing : creates object for us when drawing is done
				fabric.freedrawing

				enterFreeDrawing() {
					this.fabricCanvas.isDrawingMode = true;
				}

			0 create icObj from drawing
			0 load free drawing icObj


		0 fabric.interaction
			0 multiple selection
			0 create groups


		0 save/load
			0 save
				1 save json
				0 save to zip
					0 img hash
			0 load
				1 load json

		0 deselect (to be able to zoom out)
			https://stackoverflow.com/questions/20462307/fabric-js-how-to-deselect-one-or-multiple-objects-on-canvas
		(0 z-scroll stay centered
		1 default scroll follow cursor

		0 controls
		0 bg color

	0 sharing before dying :
		0 create gif showing program features
		0 create markdown text with program features


17 décembre 2020:
	0 continuer les points ouverts

	idées:
	0 movable/unmovable objects : bg objects vs interaction objects
	0 z-index should (/may) decrease when object gets bigger (imagine an image of the universe which was contained in a house window)
	0 group/ungroup when z-scrolling inner element

	0 inno_further:
		0 double object: {front layer, back layer}
				front layer displayed when scale <= x
				back  layer displayed when scale > x
				example: closed window / open window
				=> 0 calendrier de l'avent

			0 living object: front layer may change if something has been done "inside" object (i.e. when scale > x)


	0 edu:

		0 numbers fractal :   [             9              ]
	                        [0][1][2][3][4][5][6][7][8][9]
													etc.
													il y a le zero-level : avec [0,][1,][2,][3,][4,][5,][6,][7,][8,][9,]

		0 10^n rectangles       _____________________________________________________________________________________________________
														[                                  10^n                                                             ]
														-----------------------------------------------------------------------------------------------------

														__________
	                        	[10^(n-1)]
														----------

		0 double layer numbers :
		 		front
										[             ]
										[      9      ]
										[             ]
				back
										[  1   2   3  ]
										[  4   5   6  ]
										[  7   8   9  ]


18 décembre 2020:
	PART I / PART II
	0 save
		0 save result : success / failure

		counter (id-generator)
		offset
		scale
		icObjects

	0 load
		1 IcObject.fromJson_p()
		1 IcObject.toSerial_p()
			1 icObj.img

		0 don't redraw for every new object

	0 IcScene
		0 fromJson_p()
		0 toSerial_p()


	0 merge 2 infinishutes ?

** double scene allows "LES 7 DIFFERENCES"
		triangles qu'on dirait semblables, mais...


19 décembre 2020:
	PARIS-DAKAR : le bourbier de la rotation
		1 logs ftw
		1 ? objects ftw ?
		un peu de géométrie par la face nord
		Garbage-Shut your mouth
	TEST DE CREATION DE Z-PUZZLE
		c'est dur de faire qqchose de bien

		1 purePoint VS _noOrPoint_ VS truePoint
* /!\ please, use radians with Math.cos() Math.sin() ...



*	Hints with puzzle piece number :
		example :
			La scène : un sapin de Noël
			Un indice est inscrit dans une des boules du sapin:
				"   (1)       tout en haut du sapin   "
				  numéro
						de
						pièce


	0 ? displayReferential : pour plus de simplicité

*	0 remanent points : center point for rotation is displayed then fades when rotation is done

*	0 complex animations :
		0 X-wing : zoom-in + centered rotate
		0 spiral staircase : zoom-in + non-centered rotate

** 0 animated objects : endless spinning wheel, endless translation
*			0 user could force software to adopt moving object's referential

	0 keyY : create puzzle slot icObj

** temporal active objects :
		calendrier de l'avent : mettre un timer dans le programme pour que les fenêtres ne soit ouvrables que lorsque le jour est passé

	0 rocher à pousser:

			1 altKey does not unlock
				=> altKey is a particular key (~system key, like ctrl, tab, ...)
				=> do not use alt

			0 draw
				0 draw when key alt down
		*			http://fabricjs.com/freedrawing : creates object for us when drawing is done
				fabric.freedrawing

			1 text is not saved into icObj
				=> if(icObj.type == text) {}

			0 delete object
				0 promises everywhere
				0 canvas does not behave well after removal
			1 deselect (to be able to zoom out)
*				1 key: Space

*[
	Keyboard shortcuts:
			F: Rect
			T: Text
			G: Circle
			F: Triangle
			D: Point

			Y: Z-Puzzle slot

			R: Rotate (KeyDown (toggle))
			C: Color  (KeyDown (toggle))
*]

			0 keyZ: zoom-in to cursor / zoom-out
			1 setColor: keyDown and scroll (color list)
				1 inputProperties.colorProperties
				1 icObj.fill/icObj.stroke

			1 circle is not saved
				=> icObj.radius = json_icObject.radius;

			(0 'sizeless' point

			1 prevent keyboard shortcuts when typing text

			0 paste
			0 copy

			0 fabric.Line
				fabric.Polygon
				fabric.Polyline

			(0 fabric.Path

			(0 ? keyDown z-scroll
			1X r-scroll
** z-scroll, r-scroll, etc. is only about placing the selected object in _a different ("hovering") layer_, and then dropping it in the original layer
    maybe code would be cleaner if it was done this way
*   => hovering layer is the player's backpack (multiple objects could travel along)

			0 z-scroll goes sideways when zooming in

			0 KeyH : show help

			1 handle "negative scale"
				=> fObj.flipX
					0X icObj.scale = {
							fObj.flipX
					  }
					0X fObj.flipX = sign(icObj.scale.X) * sign(icObj.scale.Y);
					=> 1 I'd better stick to icObj.flipX since negative scale would imply that TL "reference corner" becomes TR, BL or BR

			0 fabric.interaction
				1 group selection

					0 group interactions
						0 move
						0 resize
							0 std
							0 z-scroll
						0 rotate
							0 std

				0 multiple selection
					https://stackoverflow.com/questions/56444211/multiselect-in-fabric-js-without-key-modifier
				0 create groups

			0 controls
			0 bg color

			0 import svg image
			(0 undo/redo

			1 bug {"dx":null,"dy":null} when zooming-out
				|-> division by 0
						(0 bloquer le scroll
						OU
						(0 utiliser une librairie mathématique qui gère des très très petits nombres pour avoir une scale très très petite
*						0 manageScaleUpdateWithScaleAmount -1	(le bug se produit quand on "molette long")
							=> 0 prevent abs(scaleAmount) to be 1



		0 sharing before dying :
			0 create gif showing program features
			0 create markdown text with program features


		0 edu:
				three sectors : course material plane is divided:
					green sector  : easy : for everyone
					orange sector : moderate : for almost everyone
					black  sector : serious : for strong pupils

					students can rotate the wheel to access to stronger content


		0 un z-puzzle simple:
			des carrés de couleur

		0 z-puzzle with reflection : negative scale
		0 z-puzzle with negative scale factor homothety (montrer les axes)

			0 snapping:
				0 move
				0 resize
				0 rotate
				0 what is the right snapping percentage ?

20 décembre 2020:
	!SO L!ITT!LE T!IME!
	UN PEU DE MAP CHEZ MAMAN

**0 présentation:
		0 save current pov: keyDown + number
		0 load current pov:           number

	0 z-puzzle
		0 éditeur
			0 enter editor password
			(0 sign in as editor
			 	0 pieces atomic editions are saved
		0 joueur

	0 edu:
	 	colored squares with dimensions
			0 format : factor    x     power of ten
			[---------]
			[<------->]
			[   3,8   ]
			[    x    ]
			[ 10^(-2) ]
			[_________]

*[
fabric intro :

rect.get('opacity'); // 1
rect.getAngleInRadians();

canvas.selection = false; // disable group selection
rect.set('selectable', false); // make object unselectable

canvas.item(0); // reference fabric.Rect added earlier (first object)
canvas.getObjects(); // get all objects on canvas (rect will be first and only)

canvas.onFpsUpdate = function(){ /* ... */ };

var staticCanvas = new fabric.StaticCanvas('c');


fabric intro part2 :
animations
colors:
new fabric.Color('#f55');
new fabric.Color('#123123');
new fabric.Color('rgba(10, 20, 30, 0.5)');


circle.setGradient('fill', {
  x1: 0,
  y1: 0,
  x2: circle.width,
  y2: 0,
  colorStops: {
    0: "red",
    0.2: "orange",
    0.4: "yellow",
    0.6: "green",
    0.8: "blue",
    1: "purple"
  }
});

Text:
Multiline support 			Native text methods unfortunately simply ignore new lines.
Text alignment 					Left, center, right. Useful when working with multiline text.
Text background 				Background also respects text alignment.
Text decoration 				Underline, overline, strike-through.
Line height 						Useful when working with multiline text.
Char spacing 						Makes text more compact or more spaced
Subranges 							apply colors and properties to subranges of your text object
Multibyte support 			emoticons!

var comicSansText = new fabric.Text("I'm in Comic Sans", {
  fontFamily: 'Comic Sans'
});


Events
Groups
Serialization

** fabricCanvas.toSVG();

Subclassing:

var ColoredPoint = fabric.util.createClass(Point, {
  initialize: function(x, y, color) {
    this.callSuper('initialize', x, y);
    this.color = color || '#000';
  },
  toString: function() {
    return this.callSuper('toString') + ' (color: ' + this.color + ')';
  }
});

var LabeledRect = fabric.util.createClass(fabric.Rect, {

  type: 'labeledRect',
  // initialize can be of type function(options) or function(property, options), like for text.
  // no other signatures allowed.
  initialize: function(options) {
    options || (options = { });

    this.callSuper('initialize', options);
    this.set('label', options.label || '');
  },

  toObject: function() {
    return fabric.util.object.extend(this.callSuper('toObject'), {
      label: this.get('label')
    });
  },

  _render: function(ctx) {
    this.callSuper('_render', ctx);

    ctx.font = '20px Helvetica';
    ctx.fillStyle = '#333';
    ctx.fillText(this.label, -this.width/2, -this.height/2 + 20);
  }
});

http://fabricjs.com/fabric-gotchas

Objects have a transparent stroke of width 1 by default
	=> rect.set('strokeWidth', 0);


*]



recap :

	1 rotate : only KeyR
		1 updateOrientation: NaN
			|-> Math.acos can return NaN
			=>
				if(isNaN(angle_abs)) {
					//ignore
				}


	0 draw
		0 draw when key shift down
*			http://fabricjs.com/freedrawing : creates object for us when drawing is done
		fabric.freedrawing

	0 delete object
		0 promises everywhere
		0 canvas does not behave well after removal

	1 keyZ: zoom-in to cursor / zoom-out
		"KeyW" : get aWay
		"KeyE" : "Enter"/"Explore" : zoom-in
		1 keyDownTimeout
		0 keyDownTimeout VS keyDown: complex mgmt to only zoom once when key is "simply" down-up'd (== ? pressed ?)
**		=> problem "vanishes" when timeout delay is 17 ms (== "small enough")
		1 zoom-in to cursor
			1 scaleAmount == 0.90 does not behave well
				=> use small zoom steps
		1 ? use 17ms timeout delay and smaller scaleAmount ? (so that it appears fluid)

  1 <div id="debug_container" style="position:absolute; left:0; top: 0; font-size: 60px; pointer-events: none;">


	1 enable/disable antialias
	 	ctx.imageSmoothingEnabled = false;
		1 fabricCanvas.imageSmoothingEnabled = false;
		(0 have all objects drawn on integer pixel coords
			1 KeyUpABToggle




	0 copy / paste
		document.onpaste
		document.oncopy
*[
http://fabricjs.com/copypaste

function Copy() {
	// clone what are you copying since you
	// may want copy and paste on different moment.
	// and you do not want the changes happened
	// later to reflect on the copy.
	canvas.getActiveObject().clone(function(cloned) {
		_clipboard = cloned;
	});
}

function Paste() {
	// clone again, so you can do multiple copies.
	_clipboard.clone(function(clonedObj) {
		canvas.discardActiveObject();
		clonedObj.set({
			left: clonedObj.left + 10,
			top: clonedObj.top + 10,
			evented: true,
		});
		if (clonedObj.type === 'activeSelection') {
			// active selection needs a reference to the canvas.
			clonedObj.canvas = canvas;
			clonedObj.forEachObject(function(obj) {
				canvas.add(obj);
			});
			// this should solve the unselectability
			clonedObj.setCoords();
		} else {
			canvas.add(clonedObj);
		}
		_clipboard.top += 10;
		_clipboard.left += 10;
		canvas.setActiveObject(clonedObj);
		canvas.requestRenderAll();
	});
}
*]
	https://w3c.github.io/clipboard-apis/#h-clipboard-write-data

	pasteOuterObject
		1 img
		1 text
			0 url
				if(text is url) {}
		0 svg
	pasteInnerObject
		0 fabricObject

	0 ClipboardIntegration(fileIntegration, fabricIntegration)
		0 update last paste source
		0 if(same as previous) {
				ignore outer
			}
			else {
				inner = new Inner(outer)
			}

*	0 icObj.type = "url"
		0 open new tab on click
			function opennewtab(url){
				var win = window.open(url, '_blank');
			}
		0 move to next exercise

http://fabricjs.com/interaction-with-objects-outside-canvas

*	0 icObj.type = "video"
		http://fabricjs.com/video-element
*	0 icObj.type = "webcam"


https://stackoverflow.com/questions/46243114/fabric-js-link-unlink-2-objects

	0 fabric.Line
		fabric.Polygon
			0 parallélogramme
		fabric.Polyline

	0 KeyH : show help

	0 fabric.interaction
		1 group selection
		0 select only what's entirely contained

			0 group interactions
				0 move
				0 resize
					0 std
					0 z-scroll
				0 rotate
					0 std

		0 multiple selection
			https://stackoverflow.com/questions/56444211/multiselect-in-fabric-js-without-key-modifier
		0 create groups / split groups
			0 "KeyG"

	0 z-index mgmt

	0 controls
		0 edit object properties
			0 unselectable fObj
			0 unmovable   fObj
 			0 unrotatable fObj
      0 unscalable  fObj
          0 fixed scaleX|Y
          0 fixed homeScale


	0 bg color

	0 import svg image



	0 edu:
  	0 "representation 74"
    	0 show addition of two number with this representation
     	0 allow user to type number and draw corresponding representation

21 décembre 2020:
	0 pousser, pousser, pousser

	0 icObj.type = "button"
		change cursor to hand when hovering

22 décembre 2020:
	jazz and campfire : Madrugada - Industrial Silence

	(0 copy/paste
		0 inner vs outer
			use cases:
				1. user pastes outer img when there is a fabricObj in custom clipboard
				2. user copies fabricObj when there is an outer object in navigator clipboard
				3.
**	=>  I NEED rxjs to do it cleanly
		0 url
		0 import svg

	1 delete bug: canvas no longer updates
		1X ? fabricCanvas generates new fObjs which lose their icObj property ?
		<) when all objects have been deleted, scroll is possible again
		<) newly created object reacts to scroll, old stay still
		|-> misuse of splice
* The splice() method changes the original array and returns an array that contains the deleted elements.
			=> work with the inplace-mutated array
	1 delete bug: save/load
		1X ? dict["any"] vs dict.any ?
*		|->? problème de synchronisation d'état, et d'objets "flottants dans l'espace", "c'est le problème quand on utilise des fils (== des références d'objet)"
		|-> les icObjects créés par le load n'ont pas d'updateCallback vers infiniteCanvas
			=> this.tetherIcObject(icObj) {icObj.didUpdateListeners.push ...}

	0 track changes + prompt when unsaved content before leaving
		1 track changes
			(0 var Delta = Quill.import('delta');
			1 this.changed = true;
				onsave {changed = false;}
*		1 prompt before leaving (OH MON DIEU, TOUTE UNE APRES MIDI POUR CETTE *****!)
		0 FileIntegration.save_p (success/failure)

Browsers equipped with pop-up blockers will ignore all Window.open() method calls in onunload event handler functions.
https://stackoverflow.com/questions/5259217/catching-beforeunload-confirmation-canceled

* Quill : https://quilljs.com
var quill = new Quill('#editor-container', {
  modules: {
    toolbar: true
  },
  placeholder: 'Compose an epic...',
  theme: 'snow'
});

*[
https://vancelucas.com/blog/using-window-confirm-as-a-promise/
function confirmDialog(msg) {
  return new Promise(function (resolve, reject) {
    let confirmed = window.confirm(msg);

    return confirmed ? resolve(true) : reject(false);
  });
 }
And now we can use it just like a normal promise:

confirmDialog('Do you really want to delete this?')
  .then(() => doYourDeleteAction(task.id))
  .catch(err => alert('Unable to delete!'))
*]

	0 remove icObject (programmatically (== when order does not originates from view))
		0 promises ftw
		0 ? need signals too ?

	0 groups
		0 group
**		0 fabric.ActiveSelection VS fabric.Group
					var sel = new fabric.ActiveSelection(canvas.getObjects(), {
						canvas: canvas,
					});
					canvas.setActiveObject(sel);

			0 icObj.type = group
		0 be lazy : since group is an object, leave the work to fabric
			0 group
			0 active selection
		0 ungroup
			0 ? compute the right positions/sizes/... ?
		0 "editing group" (==temporary group)
		0 onselected : passthrough


	(0 freeDrawing
		1 custom properties

canvas.freeDrawingBrush = vLinePatternBrush;

if (canvas.freeDrawingBrush) {
      var brush = canvas.freeDrawingBrush;
      brush.color = drawingColorEl.value;
      if (brush.getPatternSrc) {
        brush.source = brush.getPatternSrc.call(brush);
      }
      brush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
      brush.shadow = new fabric.Shadow({
        blur: parseInt(drawingShadowWidth.value, 10) || 0,
        offsetX: 0,
        offsetY: 0,
        affectStroke: true,
        color: drawingShadowColorEl.value,
      });
}

		0 create icObj.type = "freeDrawing"
** this step is only possible if fObj is "talkative"

				fObj.path: Array(67)
					0: (3) ["M", 932.5050397877984, 645.4692753623189]
					1: (5) ["Q", 932.5050397877984, 645.4492753623189, 933.004774535809, 644.9497016197784]
					...
					66: (3) ["L", 1297.3314058355438, 409.65046888320546]

		0 link fObj with icObj
		1 ? what is the corresponding fabric class ?
			0 fabric.SVG

var canvas = new fabric.Canvas('c');

function openSVG(e) {
   var url = URL.createObjectURL(e.target.files[0]);
   fabric.loadSVGFromURL(url, function(objects, options) {
      objects.forEach(function(svg) {
         svg.set({
            top: 90,
            left: 90,
            originX: 'center',
            originY: 'center'
         });
         svg.scaleToWidth(50);
         svg.scaleToHeight(50);
         canvas.add(svg).renderAll();
      });
   });
}

https://codepen.io/gbbeatz/pen/eVEQRV

		0 save/load
		0 try penSize = f(scale)

*[
This example shows how to remove the mousemove when mouseup is fired:
canvas.on('mouse:up', function () {
    canvas.off('mouse:move', eventHandler);
});
*]
* http://perfectionkills.com/exploring-canvas-drawing-techniques/

	0 polyline
		http://jsfiddle.net/77vg88mc/34/
		var roof = new fabric.Polyline(roofPoints, {
			fill: 'rgba(0,0,0,0)',
			stroke:'#58c'
		});

	0 circle shortcut does nothing

	0 text : edit on creation
		0 delete object if text is ''


	0 controls:
		0 object pools:

	0 et ensuite : fais ce qui te motive
		0 fractal representation
			0 create toy representation with 3 levels
				0 show number
				0 show selected towers
			0 create axes
		0 Z-Puzzle slot
		 	0 z-index mgmt

	0 tester sur d'autres navigateurs

23 décembre 2020:
	0 activeSelection
		1 listen to activeSelection events
			http://fabricjs.com/events
			object:moving {"target":{"type":"activeSelection"}
		0 transforms
			1 move
			0 scale
				1 proportionnal scale
				0 axis scale
					1 of non-rotated
*					0 axis scale of active selection containing rotated child fObjs skews child fObjs
**					=> scale would be way nicer if activeSelection was behaving like a group
							0 ? lockSkewingX ?
*							0 ? fObj.flipY

						0 props updated are wrong

							transform:
								originX: "right"
								originY: "top"
			1 rotate

			1 zScroll : redraw all but active selection
				1 updateFabricObjectsSize_zScroll
https://stackoverflow.com/questions/1187518/how-to-get-the-difference-between-two-arrays-in-javascript
				0 updateFabricObjectsPosition_zScroll
					1 scale position wrt activeSelectionTL
						0 warning : this may only work with "pure TL" (== no-flip activeSelection)
					0X activeSelection.homeScale
					1? activeSelection.icObj
*					1 icObj.type == "activeSelection" (this way I could persist user's activeSelection)

				  1 workflow:
						1.update container size: 		 activeSelection.icObj.homeScale
						2.update children  size: 		 children .homeScale
						3.update container position: activeSelection.icObj.position
					 	4.update children position:  children .position

				1 don't redraw fObjs in activeSelection

		1 activeSelection should keep position when offset changes (no mScroll for the moment)
*   	0 configuration options : keep true position(==TL) on zScroll ? yes/no
		0 add/remove from active selection

		0 rotation is not kept after move
			usecase: select objects, rotate, (move,) offset

		1 activeSelection delete


	0 groups
		1 create icObj
*		http://fabricjs.com/docs/fabric.Collection.html
			fObj.getObjects(typeopt)
			fObj.insertAt(object, index, nonSplicing)
*			fObj.complexity()

			0X ? child.groupX, etc. ?
				=> keep "true" coordinates for simplicity when nesting groups

			(static) add(…object) → {Self}
				Adds objects to collection, Canvas or Group, then renders canvas (if `renderOnAddRemove` is not `false`)

			0 createFabricGroupWithIcObj
				0 fObj size is different than original fObj size
					1 create Rect with same pos and size ('object logging')
					<) zoomX: 0.75
						 zoomY: 0.75

			0 createFabricGroupChildObjectWithIcObj
			0 icObj.computeInnerCoordinatesForIcObject(icObj2);
				0 position
				0 homeScale
				0* scale
				0 orientation



			0? continue to compute true coordinates for easy ungrouping

**(0 mScroll

** 0 toggle homeScale for new objects : infiniteCanvas.scale VS infiniteCanvas.workingHomeScale
		0 infiniteCanvas.working.homeScale
		0 infiniteCanvas.preset.homeScale
		0 Key H
		0 Shift Key H

	(0 skewing:
		http://fabricjs.com/using-transformations


	0 light-sender|eye-catcher
		0 icObj.type == "sparkle":
		0 animated image (rotation and homeScale)
			fromScale = carrier.homeScale
			toScale   = infiniteCanvas.scale
		0 animation deactivates when object has been seen "close enough"
		0 heartbeat

	Z-puzzle:
		0 new ZPuzzle(infiniteCanvas, fabricIntegration)
		0 KeyE: activate
			0 get mouse cursor

		0 editor:
		 	0 create slot and piece duo
				0 create slot
				0 create slot from fObj
						creates group with rect and fObj clone with opacity 0.40

			0 piece snap (to slot)
				0 listen to -ed events
					0 moved
					0 rotated
					0 scaled
				0 snap animation

			0 puzzle completed : rxjs

			0 slot border:
				0 white : empty
				0 green : piece ok
				0 red   : piece nok

	Xylophone:
		0 new Xylophone(infiniteCanvas, fabricIntegration)

0 program is kinda laggy with 50+ objects ...

24 décembre 2020:
	0 xylophone plz
		1 create basic 900 x 1000
		(0 fObj.xObj.isActive
		1 icObj = "toggleRect"

**	1 /!\ logs make it slow
			=> simply don't show console :)
		1 icObj.unmovable etc.
		0 zScroll is still possible

		1 bug de selection: overlapping
			=>
				padding:0
				strokeWidth:0

		1 add 0 square management
		1 only one tower can be active in xyloZone
			1 update fObj when icObj prop changes ("top down update")
**			model --> view kind of horror

		0 unitZone: highlight

		0 xyloTower: homeScale

		0 add texts
			0 below every 900x1000, write "10^<n> zone"
				0 XyloZonePerception
*				1 decimal.js : https://mikemcl.github.io/decimal.js/
					decimalInstance.toFixed()
					decimalInstance.toFraction()
					decimalInstance.toNumber()
			 (0 any base
					https://stackoverflow.com/questions/1337419/how-do-you-convert-numbers-between-different-bases-in-javascript
				0 infiniteCanvas.createIcText(left, top, _homeScale_, text)
				0 zone range
				0 zone active number
					0 infiniteCanvas.requestViewUpdateForIcObj(icText);
						0 reactive icObjects plz
				0 towerDescriptions
						___________________________
						|   1  |   2  | ...

			0 write number inside tower
			0 nombre sélectionné dans cette zone

	0 create Xylogame1

	0 initalOffset: make true (0,0) at center of screen

	0	créer une autre version du xylophone avec le zéro selectionnable et pas de toggle isActive sur les xylophone towers

25 décembre 2020:
	0 bien différencier les nombres <1 et les nombres >1 : le problème de la virgule

	0X test de creation skewed arrow:
		http://www.senocular.com/flash/tutorials/transformmatrix/
		|-> skewing won't create mathemtical trapeze: parallel-only skewing
		https://stackoverflow.com/questions/19159074/perspective-transformation-of-object-filled-with-image-in-fabricjs
**	=> 0 https://threejs.org/   (? use it one day ?, migrate from fabric to three.js ?)
				https://threejsfundamentals.org/

26 décembre 2020:
	0 double object: window open
		(0 icObj.visible
		OR
		1 infiniteCanvas.add/remove icObj
				0 removeIcObject: from model to fabric
		0 image from url

	(0 doubleObject(frontX, doubleObject(frontY, doubleObject(frontZ, ...)))
	0 double object with animation (for example: flipX for shutters or doors)

	0 trouver des images pour peupler le canvas
		https://b-ok.cc/book/807813/fcc1c8?dsource=recommend

		0 science
			98

	0 tester la librairie de graph https://github.com/anvaka/ngraph.fabric
		((0 ngraph libs:
		 			ngraph.path https://github.com/anvaka/ngraph.path


	0 zPuzzle
		1 icObj.clone()
		1 icObj.opacity
		0 snap
>>>		0 icObj_piece.update(icObj_new, "model")
			dataBinding:
*[
knockoutJS: https://en.wikipedia.org/wiki/Knockout_(web_framework)

function ViewModel() {
    this.firstName = ko.observable("");
    this.lastName = ko.observable("");

    this.fullName = ko.computed(
        function() { return this.firstName() + " " + this.lastName(); },
        this);
}
ko.applyBindings(new ViewModel());
*]
			https://javascriptio.com/view/1060293/what-is-correct-way-to-integrate-ember-js-with-canvas-library-like-fabric-js

*			https://www.wintellect.com/data-binding-pure-javascript/
				Better Two-Way Data Binding: allow for a property to be bound to one or more elements.

			0 icObj.isUnderUserControl
			0 manage zScroll
			0 deselect object when snapped

*00:00 ne pas trop tirer sur la corde si c'est possible

27 décembre 2020:
	0 graduations = f(scale)
		0 longueur (comme sur un double décimètre)
		0 largeur ? (l'idéal serait une largeur indépendante de la scale)
		toutes ces complications pour 3 pauvres graduations...
		Mais ce travail doit être réutilisé pour les
		0 doubles flèches de mesures

	PAUL:
		préfère affichage compact
		0 un axe des y chaque zone
		0 z-puzzle: slot avec 1.47 x 10^-3 qui fait écho au papier peint des xyloTowers

	0 binding:
			0X approche ~Gemini:
				there is a core
				and there are bindings
					model binding
					view 	binding
				0 faire un essai avec les Gemini
					0 qui dit Gemini dit Schema
				|-> Gemini updates move up to geminiSource and then are sent to all geminis, including the object from which update originates

			(0 approche "slot" (a completely new object instance can be set and it still pushes changes)

			(0 ~EVENT SOURCING
				https://blog.risingstack.com/event-sourcing-with-examples-node-js-at-scale/
				https://eventstore.js.org/

**		0 Representation/BackingObject: sync with representation, representation can be either view or model (or anything else ?...) (like micro event-sourcing)
				0? use C-style structs ?
						https://stackoverflow.com/questions/502366/structs-in-javascript

*[
function Book(title, href, imageUri, description) {
    this.title = title;
    this.href = href;
    this.imageUri = imageUri;
    this.description = description;
}

new Book(
        "Grokking Algorithms: An illustrated guide" ,
        "http://kbhr.co/grokking",
        "/images/books/grokking-algorithms-illustrated-guide-2.jpg",
        "Grokking Algorithms"
    )
*]
				0 skeleton
				0 BackingObject
				0 Representation
*	Representation/BackingObject: sync with representation, representation can be either view or model (or anything else ?...) (~like micro event-sourcing)
    to create ObjA instance, do BackingObject.fromRepresentation(objA).getRepresentation(); et ensuite mettre des listeners sur la représentation.
    backingObject.updateWithRepresentation(repA): this will update backingObject and then the other representations. forcément il peut y avoir des soucis s'il y a des update concurrents.
    this is kinda funny because the backing object is the core node, but it is pure fantasy

					set:
					get:

					new Proxy ?	=> regarder ce qui a été fait avec les gemini

28 décembre 2020:
	un peu de code mais tout doux car c'est dur aujourd'hui (très mal dormi)

	icObjA.x = 'lol';
	icObjA.pushUpdate()

	backingObj.updateWithRep(rep__update) {
		const affected = reps.filter(rep => rep.id != rep__update.id);
		affected.forEach(rep => rep.update())
	}

	icObjB.didUpdate()   => icObjB.didUpdateListeners trigger
	icObjC.didUpdate()   => icObjC.didUpdateListeners trigger


	1 (index):2032 Uncaught Error: unknown propName(toJSON) for representation: [object Object]
	    at Object.get ((index):2032)
	    at Object.get ((index):2098)
	    at JSON.stringify (<anonymous>)
	    at createRepresentation ((index):1998)

			https://stackoverflow.com/questions/1996717/why-do-javascript-objects-not-have-a-tojson-method
			=>
				var p = new Proxy({}, {
				  get: function(target, name, receiver) {
*				    if (name === 'toJSON') {
*				      return function() { return target; }
*				    } else {
				      return Reflect.get(target, name, receiver);
				    }
				  },
				});

	1 Uncaught TypeError: Cannot convert a Symbol value to a string
		glassFacade get Symbol(Symbol.toPrimitive)

		According to ECMA-262,
		using the addition operator on a value of type Symbol in combination with a string value first calls the internal ToPrimitive, which returns the symbol.
		It then calls the internal ToString which, for Symbols, will throw a TypeError exception.

		So calling the internal ToString is not the same as calling Symbol.prototype.toString.
		=> ?

	0 getUniqueID
		https://gist.github.com/gordonbrander/2230317
*[
function uniqueID(){
	function chr4(){
		return Math.random().toString(16).slice(-4);
	}
	return chr4() + chr4() +
		'-' + chr4() +
		'-' + chr4() +
		'-' + chr4() +
		'-' + chr4() + chr4() + chr4();
}

var ID = () => {
  let arr = new Uint32Array(8);
  window.crypto.getRandomValues(arr);
  let str = '';
  for (let i = 0; i < array.length; i++) {
    str += (i < 2 || i > 5 ? '' : '-') + arr[i].toString(16).slice(-4);
  }
  return str;
}

*]

	0 manageIcObjUpdate

29 décembre 2020:




.
